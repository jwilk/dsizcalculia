#!/usr/bin/python3

# Copyright © 2014 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import math

in_to_mm = 25.4

def printf(s, *args, **kwargs):
    print(s.format(*args, **kwargs))

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('x_px', metavar='<x-res>', help='width in pixels')
    ap.add_argument('y_px', metavar='<y-res>', help='height in pixel')
    ap.add_argument('d_in', metavar='<diam>', help='diameter in inches')
    options = ap.parse_args()
    # virtual size:
    x_px = int(options.x_px)
    y_px = int(options.y_px)
    a_px = x_px * y_px
    d_px = math.hypot(x_px, y_px)
    print('virtual size:')
    printf('- width:    {:5.0f} px', x_px)
    printf('- height:   {:5.0f} px', y_px)
    printf('- diameter: {:5.0f} px', d_px)
    printf('- area:     {:5.2f} Mpx', a_px / 1E6)
    d_mm = int(options.d_in) * in_to_mm
    print()
    # physical size:
    print('physical size:')
    x_mm = d_mm / d_px * x_px
    y_mm = d_mm / d_px * y_px
    a_mm = x_mm * y_mm
    printf('- width:    {:5.0f} mm', x_mm)
    printf('- height:   {:5.0f} mm', y_mm)
    printf('- diameter: {:5.0f} mm', d_mm)
    printf('- area:     {:5.0f} cm²', a_mm / 100)
    print()
    # physical size of one pixel:
    print('physical size of one pixel:')
    printf('- width:    {:5.2f} mm', x_mm / x_px)
    printf('- height:   {:5.2f} mm', y_mm / y_px)
    printf('- diameter: {:5.2f} mm', d_mm / d_px)
    printf('- area:     {:4.3f} mm²', a_mm / a_px)
    print()
    # physical movie size:
    for aspect in [(4, 3), (16, 9)]:
        mx_to_my = aspect[1] / aspect[0]
        printf('{}:{} movie size:', *aspect)
        mx_mm = x_mm
        my_mm = mx_mm * mx_to_my
        if my_mm > y_mm:
            my_mm = y_mm
            mx_mm = my_mm / mx_to_my
        md_mm = math.hypot(mx_mm, my_mm)
        ma_mm = mx_mm * my_mm
        assert mx_mm <= x_mm
        assert my_mm <= y_mm
        assert md_mm <= d_mm
        assert ma_mm <= a_mm
        printf('- width:    {:5.0f} mm', mx_mm)
        printf('- height:   {:5.0f} mm', my_mm)
        printf('- diameter: {:5.0f} mm', md_mm)
        printf('- area:     {:5.0f} cm²', ma_mm / 100)
        print()

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
